public class QucikSelect{

    public int partition(int[] ary, int si, int ei){
	int[] copy = new int[ary.length];
	System.arraycopy(ary,0,copy,0,ary.length);
	Random rand = new Random();
	int i = rand.nextInt(ei - si + 1) + si;
	int pivot = copy[i];
	int s = si;
	int e = ei;
	for(int q = s; q < e; q++){
	    if(ary[q] == pivot){
		continue;
	    }
	    if(ary[q] > pivot){
		ary[si] = copy[q];
		si++;
	    }else{
		ary[ei] = copy[q];
		ei--;
	    }
	}
	ary[si] = pivot;
	return i;
    }
    public int quickselect(int[] ary, int pos){
	int q = parition(ary,0,ary.length - 1);
	return qsh(ary,0,ary.length,q,pos);
    }
    public int qsh(int[] ary, int si, int ei, int cpos, int pos){
	if(cpos == pos){
	    return ary[cpos];
	}else if(cpos > pos){
	    int q = partition(ary,si,cpos);
	    return qsh(ary,si,cpos,q,pos);
	}else{
	    int q = partition(ary,cpos,ei);
	    return qsh(ary,cpos,ei,q,pos);
	}
    }

}
